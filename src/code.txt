     {/*token ? (
        <div className="topUserItems">
          {" "}
          <h>Display Top Artists</h>
          <div className="buttonDiv">
            <button onClick={setDaily}>Daily</button>
            <button onClick={setMonthly}>Monthly</button>
            <button onClick={setYearly}>Yearly</button>
          </div>
          <h>{result()}</h>
          <div>
            <button onClick={combine}> Find Top Aritsts</button>
          </div>
        </div>
      ) : (
        <h> </h>
      )*/}

      {/*token ? <div> {renderTopItems()} </div> : <h></h>*/}

      {/*token ? (
        <div className="searchDiv">
          <h className="searhForHeader"> Search For Your Artists </h>
          <form onSubmit={searchArtists}>
            <input
              type="text"
              onChange={(e) => setSearchKey(e.target.value)}
            ></input>

            <button type="submit"> Start </button>
          </form>
        </div>
      ) : (
        <h> </h>
      )*/}

      {/*token ? <div> {renderArtists()} </div> : <h></h>*/}


        /*var authParameters = {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body:
        "&code=" +
        code +
        "grant_type=client_credentials&client_id=" +
        clientID +
        "&client_secret=" +
        clientSID +
        "&scope" +
        scopeType,
    };

    fetch("https://accounts.spotify.com/api/token", authParameters)
      .then((result) => result.json())
      .then((data) => setToken(data.access_token));*/

        function onPageLoad() {
    clientID = localStorage.getItem("client_id");
    clientSID = localStorage.getItem("client_secret");
    if (window.location.search.length > 0) {
      handleRedirect();
    }
  }

  function requestAuthorization() {
    clientID = document.getElementById("clientId").value;
    clientSID = document.getElementById("clientSecret").value;
    localStorage.setItem("client_id", clientID);
    localStorage.setItem("client_secret", clientSID); // In a real app you should not expose your client_secret to the user

    let url = authendpointURL;
    url += "?client_id=" + clientID;
    url += "&response_type=code";
    url += "&redirect_uri=" + encodeURI(redirectURL);
    url += "&show_dialog=true";
    url +=
      "&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private";
    window.location.href = url; // Show Spotify's authorization screen
  }

  function handleRedirect() {
    let codeTest = getCode();
    setCode(codeTest);
    fetchAccessToken(codeTest);
    console.log("code", code);
    window.history.pushState("", "", redirectURL);
  }

  function getCode() {
    let code = null;
    const queryString = window.location.search;
    if (queryString.length > 0) {
      const urlParams = new URLSearchParams(queryString);
      code = urlParams.get("code");
    }
    return code;
  }

  function fetchAccessToken(code) {
    let body = "grant_type=authorization_code";
    body += "&code=" + code;
    body += "&redirect_uri=" + redirectURL;
    body += "&client_id=" + clientID;
    body += "&client_secret=" + clientSID;
    callAuthorizationApi(code);
  }

  async function callAuthorizationApi(code) {
    let holder = Buffer.from(clientID + ":" + clientSID).toString("base64");
    const { data } = await axios.post(
      "https://accounts.spotify.com/api/token",
      {
        body: {
          grant_type: "authorization_code",
          code: { code },
          redirect_uri: encodeURI(redirectURL),
        },
        headers: {
          Authorization: "Basic " + holder,
          "Content-Type": "application/x-www-form-urlencoded",
        },
      }
    );
    console.log("test", data.access_token);
    return data.access_token;
  }

  function handleAuthorizationResponse() {
    if (this.status == 200) {
      var data = JSON.parse(this.responseText);
      console.log(data);
      setToken(data.access_token);
      var data = JSON.parse(this.responseText);
      if (data.access_token != undefined) {
        setToken(data.access_token);
        localStorage.setItem("access_token", data.access_token);
      }
    } else {
      console.log("test", this.responseText);
      console.log();
      alert(this.responseText);
    }
  }

            Authorization: `Basic ${encoded}`,

                code: code,
        redirect_uri: redirectUri,
        client_id: clientId,
        client_secret: clientSecret,
